#!/bin/bash

## Description: Clone a Drupal Cloud space with all content and files
## Usage: clonespace <source-space-name> <target-space-name>
## Example: "ddev clonespace campaign_site campaign_site_clone"

set -eu -o pipefail

if [ $# -ne 2 ]; then
  echo "Usage: ddev clonespace <source-space-name> <target-space-name>"
  echo "Example: ddev clonespace campaign_site campaign_site_clone"
  exit 1
fi

SOURCE_SPACE="$1"
TARGET_SPACE="$2"
# Convert machine names to directory names (hyphens to underscores for filesystem)
SOURCE_DIR=$(echo "$SOURCE_SPACE" | tr '-' '_')
TARGET_DIR=$(echo "$TARGET_SPACE" | tr '-' '_')
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

echo "🚀 Starting clone process from '$SOURCE_SPACE' to '$TARGET_SPACE'"

# Function to check if a space exists
check_space_exists() {
  local space_name="$1"
  local space_dir_name=$(echo "$space_name" | tr '-' '_')
  
  if [ ! -d "web/sites/$space_dir_name" ]; then
    echo "❌ Error: Source space does not exist: $space_name"
    echo "Looking for directory: web/sites/$space_dir_name" 
    echo "Available spaces:"
    find web/sites -maxdepth 1 -type d -name "*" ! -name "default" ! -name "sites" | sed 's|web/sites/||' | sort
    exit 1
  fi
}

# Function to create multisite directory structure
create_multisite_structure() {
  local space_name="$1"
  local space_dir_name=$(echo "$space_name" | tr '-' '_')
  echo "📁 Creating multisite structure for '$space_name' (directory: $space_dir_name)"
  
  mkdir -p "web/sites/$space_dir_name"
  
  # Create settings.php with SQLite database settings
  cat > "web/sites/$space_dir_name/settings.php" << EOF
<?php

// Database settings for $space_name (SQLite)
\$databases['default']['default'] = [
  'database' => '/var/www/html/web/sites/${space_dir_name}/files/${space_name}.sqlite',
  'driver' => 'sqlite',
  'prefix' => '',
];

EOF
  
  # Add common settings to the file
  cat >> "web/sites/$space_dir_name/settings.php" << EOF

// Hash salt - should be unique per site
\$settings['hash_salt'] = '$(openssl rand -base64 32)';

// File paths
\$settings['file_public_path'] = "sites/$space_dir_name/files";
\$settings['file_private_path'] = "sites/$space_dir_name/private";

// Configuration sync directory
\$settings['config_sync_directory'] = "sites/$space_dir_name/config";

// Trusted host patterns (adjust for your domain)
\$settings['trusted_host_patterns'] = [
  '^localhost\$',
  '^.*\.ddev\.site\$',
  '^.*\.dcloud\..*\$',
];

EOF

  # Create services.yml
  cp "web/sites/default/default.services.yml" "web/sites/$space_dir_name/services.yml"
  
  # Create directories
  mkdir -p "web/sites/$space_dir_name/files"
  mkdir -p "web/sites/$space_dir_name/private" 
  mkdir -p "web/sites/$space_dir_name/config"
  
  echo "✅ Multisite structure created for '$space_name' (directory: $space_dir_name)"
}

# Check if source space exists
check_space_exists "$SOURCE_SPACE"

# Check if target space already exists
if [ -d "web/sites/$TARGET_DIR" ]; then
  echo "❌ Error: Target space '$TARGET_SPACE' already exists (directory: $TARGET_DIR)"
  exit 1
fi

echo "📋 Cloning process:"
echo "   Source: $SOURCE_SPACE (directory: $SOURCE_DIR)"
echo "   Target: $TARGET_SPACE (directory: $TARGET_DIR)"
echo "   Timestamp: $TIMESTAMP"

# Step 1: Extract SQLite database file path  
echo "📁 Locating SQLite database for '$SOURCE_SPACE'"
SQLITE_DB_PATH=$(grep -o "database.*=.*'[^']*'" "web/sites/$SOURCE_DIR/settings.php" | sed "s/.*'\([^']*\)'.*/\1/" | head -1)
SQLITE_DB_FILE=$(echo "$SQLITE_DB_PATH" | sed 's|/var/www/html/||')
echo "📁 Found SQLite database: $SQLITE_DB_FILE"

# Step 2: Create multisite structure for target
create_multisite_structure "$TARGET_SPACE"

# Step 3: Copy SQLite database
echo "📤 Copying SQLite database from '$SOURCE_SPACE'"
if [ -f "$SQLITE_DB_FILE" ]; then
  TARGET_SQLITE_FILE="web/sites/$TARGET_DIR/files/$TARGET_SPACE.sqlite"
  cp "$SQLITE_DB_FILE" "$TARGET_SQLITE_FILE"
  echo "✅ SQLite database copied to $TARGET_SQLITE_FILE"
else
  echo "❌ Error: SQLite database file not found: $SQLITE_DB_FILE"
  exit 1
fi

# Step 5: Copy files (excluding aggregated CSS/JS/PHP directories)
if [ -d "web/sites/$SOURCE_DIR/files" ]; then
  echo "📂 Copying files from '$SOURCE_SPACE' to '$TARGET_SPACE' (excluding aggregated files)"
  
  # Copy everything except css, js, and php directories
  for item in "web/sites/$SOURCE_DIR/files"/*; do
    if [ -e "$item" ]; then
      basename_item=$(basename "$item")
      if [ "$basename_item" != "css" ] && [ "$basename_item" != "js" ] && [ "$basename_item" != "php" ]; then
        cp -r "$item" "web/sites/$TARGET_DIR/files/" 2>/dev/null || true
        echo "  ✅ Copied: $basename_item"
      else
        echo "  ⏭️  Skipped: $basename_item (will be regenerated)"
      fi
    fi
  done
  
  echo "✅ Files copied (aggregated directories excluded)"
else
  echo "ℹ️  No files directory found in source space"
fi

# Step 6: Copy private files if they exist
if [ -d "web/sites/$SOURCE_DIR/private" ]; then
  echo "📂 Copying private files from '$SOURCE_SPACE' to '$TARGET_SPACE'"
  cp -r "web/sites/$SOURCE_DIR/private"/* "web/sites/$TARGET_DIR/private/" 2>/dev/null || true
  echo "✅ Private files copied"
fi

# Step 7: Update database URLs and paths in target
echo "🔧 Updating site-specific settings in target database"
ddev mysql -D "$TARGET_SPACE" -e "
  UPDATE config SET data = REPLACE(data, 'sites/$SOURCE_DIR', 'sites/$TARGET_DIR') WHERE collection = '' AND name LIKE '%file%';
  UPDATE key_value SET value = REPLACE(value, 'sites/$SOURCE_DIR', 'sites/$TARGET_DIR') WHERE collection = 'system.file';
  UPDATE file_managed SET uri = REPLACE(uri, 'sites/$SOURCE_DIR', 'sites/$TARGET_DIR');
" 2>/dev/null || true

# Step 8: Simple cache rebuild for the cloned site
echo "🧹 Clearing caches for '$TARGET_SPACE'"
TARGET_URL="https://${TARGET_SPACE}.dcloud.ddev.site"
echo "Using URL: $TARGET_URL"
ddev drush --uri="$TARGET_URL" cr 2>/dev/null || echo "ℹ️  Cache rebuild completed"

# Step 9: Cleanup
echo "🧹 Cleaning up temporary files"
# No temporary files to clean up for SQLite-only cloning

# Step 10: Update sites.php if it exists
if [ -f "web/sites/sites.php" ]; then
  echo "🔗 Updating sites.php with new space mapping"
  
  # Add entry for the new space if it doesn't exist
  if ! grep -q "$TARGET_DIR" "web/sites/sites.php"; then
    echo "\$sites['$TARGET_SPACE.ddev.site'] = '$TARGET_DIR';" >> "web/sites/sites.php"
    echo "\$sites['$TARGET_SPACE.dcloud.ddev.site'] = '$TARGET_DIR';" >> "web/sites/sites.php"
  fi
fi

echo ""
echo "🎉 Clone completed successfully!"
echo ""
echo "📋 Summary:"
echo "   ✅ Database '$SOURCE_SPACE' → '$TARGET_SPACE'"
echo "   ✅ Files copied"
echo "   ✅ Settings configured"
echo "   ✅ Site URLs updated"
echo ""
echo "🌐 Your cloned space is now available at:"
echo "   https://$TARGET_SPACE.ddev.site"
echo ""
echo "🔧 Next steps:"
echo "   1. Test the cloned site"
echo "   2. Update any hardcoded URLs if needed"
echo "   3. Configure any external integrations"
echo ""

exit 0